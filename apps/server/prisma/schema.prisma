// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  email         String          @unique
  password      String
  fullname      String
  bio           String?
  photoURL      String?
  role          Role            @default(USER)
  notebooks     Notebook[]
  notes         Note[]
  tags          Tag[]
  tagsOnNotes   TagsOnNotes[]
  favoriteNotes FavoriteNotes[]
  pinnedNotes   PinnedNotes[]
}

model Notebook {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String
  description String?
  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentId    String?
  parent      Notebook?  @relation("ParentNotebook", fields: [parentId], references: [id], onDelete: Cascade)
  notebooks   Notebook[] @relation("ParentNotebook")
  notes       Note[]
}

model Note {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  title         String
  description   String?
  body          String
  isDeleted     Boolean?
  authorId      String
  author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  notebookId    String?
  notebook      Notebook?       @relation(fields: [notebookId], references: [id], onDelete: Cascade)
  tags          TagsOnNotes[]
  favoriteNotes FavoriteNotes[]
  pinnedNotes   PinnedNotes[]
}

model Tag {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String
  description String
  authorId    String
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  notes       TagsOnNotes[]
}

model TagsOnNotes {
  assignedAt   DateTime @default(now())
  noteId       String
  note         Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tagId        String
  tag          Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  assignedById String
  assignedBy   User     @relation(fields: [assignedById], references: [id], onDelete: Cascade)

  @@id([noteId, tagId])
}

model FavoriteNotes {
  assignedAt DateTime @default(now())
  noteId     String
  note       Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([noteId, userId])
}

model PinnedNotes {
  assignedAt DateTime @default(now())
  noteId     String
  note       Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([noteId, userId])
}
